Success (StatementLet (Token {token = "let", at = Location {file = "example.ni", line = 1, column = 1}, kind = Special}) [StatementFunc {funcToken = Token {token = "func", at = Location {file = "example.ni", line = 2, column = 5}, kind = Special}, funcName = Token {token = "main", at = Location {file = "example.ni", line = 2, column = 10}, kind = Identifier}, argumentsStatement = [], funcBangStatement = Nothing, returnTypeStatement = Nothing, bodyStatement = [StatementVarAssign (Token {token = "x", at = Location {file = "example.ni", line = 3, column = 13}, kind = Identifier}) (TypeName (Token {token = "Int", at = Location {file = "example.ni", line = 3, column = 17}, kind = Identifier})) (ExpressionIntegerLiteral (Token {token = "1", at = Location {file = "example.ni", line = 3, column = 23}, kind = IntegerLiteral})),StatementWhile (Token {token = "while", at = Location {file = "example.ni", line = 4, column = 9}, kind = Special}) (ExpressionOp (ExpressionIdentifier (Token {token = "x", at = Location {file = "example.ni", line = 4, column = 15}, kind = Identifier})) (Token {token = "<", at = Location {file = "example.ni", line = 4, column = 17}, kind = Operator}) (ExpressionIntegerLiteral (Token {token = "20", at = Location {file = "example.ni", line = 4, column = 19}, kind = IntegerLiteral}))) [StatementDo (ExpressionCall (ExpressionIdentifier (Token {token = "print", at = Location {file = "example.ni", line = 5, column = 13}, kind = Identifier})) [ExpressionIdentifier (Token {token = "x", at = Location {file = "example.ni", line = 5, column = 19}, kind = Identifier}),ExpressionBang (Token {token = "!", at = Location {file = "example.ni", line = 5, column = 20}, kind = Special})]),StatementAssign (Token {token = "x", at = Location {file = "example.ni", line = 6, column = 13}, kind = Identifier}) (ExpressionOp (ExpressionIdentifier (Token {token = "x", at = Location {file = "example.ni", line = 6, column = 17}, kind = Identifier})) (Token {token = "+", at = Location {file = "example.ni", line = 6, column = 19}, kind = Operator}) (ExpressionIntegerLiteral (Token {token = "1", at = Location {file = "example.ni", line = 6, column = 21}, kind = IntegerLiteral})))]]}]) []